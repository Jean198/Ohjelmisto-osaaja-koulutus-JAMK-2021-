-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema AB5120_3
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema AB5120_3
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `AB5120_3` ;
USE `AB5120_3` ;

-- -----------------------------------------------------
-- Table `AB5120_3`.`personCharacter`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AB5120_3`.`personCharacter` (
  `personCharacterId` INT NOT NULL AUTO_INCREMENT,
  `personCharacterName` VARCHAR(45) NOT NULL,
  `personCharacterDescription` VARCHAR(256) NULL,
  PRIMARY KEY (`personCharacterId`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `AB5120_3`.`person`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AB5120_3`.`person` (
  `personId` INT NOT NULL AUTO_INCREMENT,
  `personName` VARCHAR(45) NOT NULL,
  `personCharacterId` INT NOT NULL,
  PRIMARY KEY (`personId`),
  INDEX `fk_person_personCharacter1_idx` (`personCharacterId` ASC) VISIBLE,
  CONSTRAINT `fk_person_personCharacter1`
    FOREIGN KEY (`personCharacterId`)
    REFERENCES `AB5120_3`.`personCharacter` (`personCharacterId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `AB5120_3`.`skillGroup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AB5120_3`.`skillGroup` (
  `skillGroupId` INT NOT NULL AUTO_INCREMENT,
  `skillGroupName` VARCHAR(45) NOT NULL,
  `skillGroupDescription` VARCHAR(256) NULL,
  PRIMARY KEY (`skillGroupId`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `AB5120_3`.`skills`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AB5120_3`.`skills` (
  `skillId` INT NOT NULL AUTO_INCREMENT,
  `skillName` VARCHAR(45) NOT NULL,
  `skillDescription` VARCHAR(256) NULL,
  `skillExperience` VARCHAR(256) NULL,
  `skillGroupId` INT NOT NULL,
  PRIMARY KEY (`skillId`),
  INDEX `fk_skills_skillGroup1_idx` (`skillGroupId` ASC) VISIBLE,
  CONSTRAINT `fk_skills_skillGroup1`
    FOREIGN KEY (`skillGroupId`)
    REFERENCES `AB5120_3`.`skillGroup` (`skillGroupId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `AB5120_3`.`assessment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `AB5120_3`.`assessment` (
  `assessmentId` INT NOT NULL AUTO_INCREMENT,
  `personId` INT NOT NULL,
  `skillId` INT NOT NULL,
  `knowledgeAssessment` TINYINT NOT NULL,
  `experienceAssessment` TINYINT NOT NULL,
  `assessorId` INT NOT NULL,
  INDEX `fk_person_has_skills_skills1_idx` (`skillId` ASC) VISIBLE,
  INDEX `fk_person_has_skills_person_idx` (`personId` ASC) VISIBLE,
  PRIMARY KEY (`assessmentId`),
  UNIQUE INDEX `up_personId_skillId_assessorId` (`personId` ASC, `skillId` ASC, `assessorId` ASC) VISIBLE,
  CONSTRAINT `fk_person_has_skills_person`
    FOREIGN KEY (`personId`)
    REFERENCES `AB5120_3`.`person` (`personId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_person_has_skills_skills1`
    FOREIGN KEY (`skillId`)
    REFERENCES `AB5120_3`.`skills` (`skillId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_assessment_person1`
    FOREIGN KEY (`assessorId`)
    REFERENCES `AB5120_3`.`person` (`personId`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;



------------------------------------------------------------------------------------------------------------------------

INSERT INTO personCharacter(personCharacterName,personCharacterDescription) 
VALUES("Professional expert","Registered certified expert with many years of work experience"), 
        ("Amateur","with no work experience");

INSERT INTO skillGroup(skillGroupName,skillGroupDescription)
VALUES("Technical skills","TEchnical Lorem Ipsum is simply dummy text of the printing"),
("Operating skills","Operating Lorem Ipsum is simply dummy text of the printing"),
("Environment implementation skills","Environment Lorem Ipsum is simply dummy text of the printing");


INSERT INTO person(personId,personName,personCharacterId)
VALUES(1,"Sanna",2),
      (2,"Maunu",2),
      (3,"Jaana",2),
      (4,"Henrik",1),
      (5,"Daavid",1)
      ;
      


INSERT INTO skills(skillName,skillDescription,skillExperience,SkillGroupId)
VALUES("Laatu","Laatu Lorem Ipsum is simply dummy..","Laatu Lorem Ipsum is simply dummy..",1),
      ("Resurssit","Resurssit Lorem Ipsum is simply dummy..","Resurssit Lorem Ipsum is simply dummy..",1),
      ("Itsevarmuus","Itsevarmuus Lorem Ipsum is simply dummy..","Itsevarmuus Lorem Ipsum is simply dummy..",2),
      ("Rentous","Rentous Lorem Ipsum is simply dummy..","Rentous Lorem Ipsum is simply dummy..",2),
      ("Liiketoiminta","Liiketoiminta Lorem Ipsum is simply dummy..","Liiketoiminta Lorem Ipsum is simply dummy..",3),
      ("Rahoitus","Rahoitus Lorem Ipsum is simply dummy..","Rahoitus Lorem Ipsum is simply dummy..",3)
      ;







ALTER TABLE assessment 
ADD CONSTRAINT chk_knowledgeAssessment CHECK (knowledgeAssessment > 0 AND knowledgeAssessment <= 10);

ALTER TABLE assessment
ADD CONSTRAINT chk_experienceAssessment CHECK (experienceAssessment > 0 AND experienceAssessment <= 10);



INSERT INTO assessment(personId,skillId,knowledgeAssessment,experienceAssessment,assessorId)
VALUES(1,1,10,10,1),
      (1,2,9,9,1),
      (1,3,8,8,1),
      (1,4,7,7,1),
      (1,5,6,6,1),
      (1,6,5,5,1),
      
      (1,1,7,6,4),
      (1,2,7,6,4),
      (1,3,7,5,4),
      (1,4,3,5,4),
      (1,5,7,5,4),
      (1,6,5,4,4),
      
      (2,1,6,6,2),
      (2,2,9,8,2),
      (2,3,6,5,2),
      (2,4,7,7,2),
      (2,5,9,8,2),
      (2,6,6,5,2),
      
      (2,1,8,8,5),
      (2,2,8,7,5),
      (2,3,5,4,5),
      (2,4,7,6,5),
      (2,5,6,4,5),
      (2,6,5,3,5),
      
      (3,1,8,7,3),
      (3,2,4,3,3),
      (3,3,9,6,3),
      (3,4,7,4,3),
      (3,5,8,5,3),
      (3,6,10,9,3),
      
      (3,1,10,10,5),
      (3,2,4,4,5),
      (3,3,4,3,5),
      (3,4,2,1,5),
      (3,5,3,1,5),
      (3,6,5,4,5),
      
      (4,1,10,6,4),
      (4,2,6,4,4),
      (4,3,8,8,4),
      (4,4,6,4,4),
      (4,5,6,5,4),
      (4,6,8,5,4),
      
      (4,1,10,5,5),
      (4,2,9,5,5),
      (4,3,9,8,5),
      (4,4,7,4,5),
      (4,5,6,6,5),
      (4,6,6,5,5),
      
      (5,1,9,10,4),
      (5,2,9,4,4),
      (5,3,8,3,4),
      (5,4,5,7,4),
      (5,5,8,6,4),
      (5,6,4,5,4),
      
      (5,1,10,5,5),
      (5,2,8,9,5),
      (5,3,8,5,5),
      (5,4,7,4,5),
      (5,5,7,6,5),
      (5,6,5,5,5)
      
      ;


# 3. A-------------------------

SELECT personID, ROUND(AVG(knowledgeAssessment),1) AS knowlwdge_Avg_grade, ROUND(AVG(experienceAssessment),1) AS experience_Avg_grade 
FROM assessment
WHERE personId=assessorId
GROUP BY personId;

# 3.B---------------------------------

SELECT personID, ROUND(AVG(knowledgeAssessment),1) AS knowlwdge_Avg_grade, ROUND(AVG(experienceAssessment),1) AS experience_Avg_grade 
FROM assessment
WHERE assessorId in=4
GROUP BY personId;

3.C-----------------------------

SELECT personId, skillId, ROUND(AVG(knowledgeAssessment),1) AS knowlwdge_Avg_grade, ROUND(AVG(experienceAssessment),1) AS experience_Avg_grade, assessorId 
FROM assessment
WHERE assessorId IN (1,2,4,6)
GROUP BY personId, skillId;

3.D----------------------------------------

SELECT personId, skillGroupName, ROUND(AVG(knowledgeAssessment),1) AS knowlwdge_Avg_grade, ROUND(AVG(experienceAssessment),1) AS experience_Avg_grade
FROM assessment
INNER JOIN skills
ON assessment.skillId=skills.skillId
INNER JOIN skillGroup 
ON skillGroup.skillGroupId=skills.skillGroupId
WHERE personId=assessment.assessorId
GROUP BY personId,skills.skillGroupId;

3.E--------------------------------------------------------

SELECT personID, ROUND(AVG(knowledgeAssessment),1) AS knowlwdge_Avg_grade, ROUND(AVG(experienceAssessment),1) AS experience_Avg_grade 
FROM assessment
WHERE personId != assessorId
GROUP BY personId;

